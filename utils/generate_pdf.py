from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
from reportlab.lib.colors import red
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
import io
import requests
from PIL import Image

pdfmetrics.registerFont(TTFont('THSarabun', 'static/fonts/THSarabun.ttf'))

def draw_image(c, image_url, x, y, width):
    try:
        img_data = requests.get(image_url).content
        img = Image.open(io.BytesIO(img_data))
        aspect = img.height / img.width
        height = width * aspect
        img_io = io.BytesIO()
        img.save(img_io, format='PNG')
        img_io.seek(0)
        c.drawImage(ImageReader(img_io), x, y - height, width, height)
    except Exception as e:
        print(f"Error loading image {image_url}: {e}")


def create_qc_pdf(data, image_urls=[]):
    buffer = io.BytesIO()
    c = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4
    margin = 2 * cm
    line = height - margin

    def draw_text(text, bold=False, color=None):
        nonlocal line
        if bold:
            c.setFont("Helvetica-Bold", 12)
        else:
            c.setFont("Helvetica", 12)
        if color:
            c.setFillColor(color)
        else:
            c.setFillColorRGB(0, 0, 0)
        c.drawString(margin, line, text)
        line -= 18

    # Title
    c.setFont("Helvetica-Bold", 16)
    c.drawCentredString(width / 2, line, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö QC ‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå")
    line -= 30

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    draw_text(f"Serial Number: {data.get('serial', '-')}", bold=True)
    draw_text(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {data.get('date', '-')}")
    draw_text(f"‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: {data.get('product_type', '-')}")
    draw_text(f"‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå: {data.get('motor_nameplate', '-')}")

    # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    product_type = data.get("product_type", "").lower()
    is_acdc_or_bldc = "ac/dc" in product_type or "bldc" in product_type
    is_servo = "servo" in product_type
    is_other = not is_acdc_or_bldc and not is_servo

    # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Servo
    if is_servo:
        draw_text("**‡πÑ‡∏°‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", bold=True, color=red)
        draw_text("**‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå", bold=True, color=red)

    draw_text("")

    # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    if data.get("motor_current"):
        draw_text(f"‡∏Ñ‡πà‡∏≤‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏°‡∏≠‡πÄ‡∏ï‡∏≠‡∏£‡πå: {data['motor_current']} A")
    if data.get("gear_ratio"):
        draw_text(f"‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏ó‡∏î‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå: {data['gear_ratio']}")
    if data.get("gear_sound"):
        draw_text(f"‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå: {data['gear_sound']} dB")

    # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô
    if not is_acdc_or_bldc and not is_servo:
        draw_text(f"‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå (‡∏•‡∏¥‡∏ï‡∏£): {data.get('oil_liters', '-') or '-'} ‡∏•‡∏¥‡∏ï‡∏£")
        draw_text(f"‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô: {data.get('oil_filled', '-')}")
    elif is_acdc_or_bldc:
        draw_text("*‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå", bold=True, color=red)

    # Warranty
    draw_text(f"‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô: {data.get('warranty', '-')} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", bold=True, color=red)

    # Inspector
    draw_text(f"‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {data.get('inspector', '-')}")

    # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
    if is_servo:
        draw_text("")
        draw_text("**‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ 18 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", bold=True, color=red)

    # ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
    line -= 20
    c.setFont("Helvetica-Bold", 12)
    c.drawString(margin, line, "‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö:")
    line -= 20

    img_x = margin
    img_y = line
    img_width = 6 * cm

    for url in image_urls:
        if line < 5 * cm:
            c.showPage()
            line = height - margin
            img_y = line
        draw_image(c, url, img_x, img_y, img_width)
        img_x += img_width + 1 * cm
        if img_x + img_width > width - margin:
            img_x = margin
            img_y -= 6 * cm


    # === Footer ===
        c.showPage()
    c.setFont("THSarabun", 18)
    c.drawString(2 * cm, 1 * cm, "üìû SAS Service: 081-9216225")
    c.drawRightString(width - 2 * cm, 1 * cm, "üìû SAS Sales: 081-9216225 ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏¢‡∏®")
    c.save()
    buffer.seek(0)
    return buffer

# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ ImageReader
from reportlab.lib.utils import ImageReader